name: CI/CD Pipeline ‚Äì Vibe Profil Service

on:
  pull_request:
    branches:
      - '**'
  push:
    branches:
      - main
    tags:
      - 'v*' # Nur f√ºr Versionstags (z.B. v1.0.0)

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}

  ACTIVE_PROFILE: ${{ secrets.ACTIVE_PROFILE }}
  HTTPS: ${{ secrets.HTTPS }}

  KC_SERVICE_SECRET: ${{ secrets.KC_SERVICE_SECRET }}

  KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
  KEYS_PATH: ${{ secrets.KEYS_PATH }}

jobs:
  build:
    name: üî® Build & Test (Maven)
    runs-on: ubuntu-latest
    outputs:
      CURRENT_DATE: ${{ steps.set_date.outputs.CURRENT_DATE }}
    strategy:
      matrix:
        node-version: [23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print ref name
        run: echo "This workflow was triggered by ${{ github.ref_name }}"

      - name: Print actor
        run: echo "The actor is ${{ github.actor }}"

      - name: Print tag
        run: echo "The tag is ${{ github.ref_name }}"

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache Node.js modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Compile TypeScript
        run: npx tsc

      - name: Set CURRENT_DATE
        id: set_date
        run: |
          DATE=$(date +'%Y-%m-%d')
          echo "CURRENT_DATE=$DATE" >> $GITHUB_OUTPUT

      - name: Aktualisiere CURRENT_DATE in Organisations-Variable (sicher)
        run: |
          CURRENT_DATE="${{ steps.set_date.outputs.CURRENT_DATE }}"

          if [ -z "$CURRENT_DATE" ]; then
            echo "Fehler: CURRENT_DATE ist leer!"
            exit 1
          fi

          ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)

          EXISTING=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
            | jq -r '.value')

          echo "Updating org-level CURRENT_DATE from $EXISTING to $CURRENT_DATE"

          if [ "$EXISTING" != "$CURRENT_DATE" ]; then
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              https://api.github.com/orgs/${ORG_NAME}/actions/variables/CURRENT_DATE \
              -d "{\"value\": \"${CURRENT_DATE}\"}"
          else
            echo "CURRENT_DATE ist bereits aktuell: $CURRENT_DATE"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist
          retention-days: 1

  analyze:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [23.x]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Restore Node.js modules from cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}

      # - name: Lint code
      #   run: npm run eslint

      # - name: Security audit
      #   run: npm audit --omit=dev --audit-level=high

      - name: Generate documentation (TypeDoc)
        run: npm run typedoc


  package:
    name: üì¶ Package Application
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [23.x]
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Download dist folder
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ matrix.node-version }}
          path: dist

      - name: Package distribution
        run: zip -r dist.zip ./dist

      - name: Upload package
        uses: actions/upload-artifact@v4
        with:
          name: dist-package-${{ matrix.node-version }}
          path: dist.zip

  docker:
    name: üê≥ Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build, package]
    env:
      CURRENT_DATE: ${{ needs.build.outputs.CURRENT_DATE }}
    if: github.actor == 'caleb-script' && github.event_name == 'push'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: image=moby/buildkit:latest
        
      - name: Log in to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN}}
        
      - name: Set up Docker Cache
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ github.sha }}
          restore-keys: |
            buildx-
        
      - name: Build and Push Docker Image (GHCR)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.CURRENT_DATE }}
            ghcr.io/${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
        


          